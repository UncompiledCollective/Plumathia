@use 'sass:math';
@import "./styles/variables.scss";
@import "./styles/mixins.scss";
@import "./styles/keyframes.scss";
@import "./fonts/fonts.scss";
$checkmark:"./assets/images/checkmark3.svg";
$ngClass:ng-reflect-class-name;
$ngTheme:ng-reflect-theme;
$light-shadow: fade-out(#ff60fc,0.4);
app-root{
}
.root {
  @include posSize(absolute);
  @include backgroundGradient(linear, to bottom, (#09121b 20%, #141e30 60%, #2a1b33 80%, #d2489a 180%),(0%, 30%));//change colors to black ?  
}
body{
    font-size:20px;
    font-family:sans-serif;
    font-family:'Cascadia Code';
}
$toolbar-width:92%;
$toolbar-height:4rem;
$toolbar-offset-top:0.5rem;
$toolbar-boxes-number:4;
app-toolbar[#{$ngClass}="top-main"] {
  $offset:math.div(100% - $toolbar-width,2);
  @include posSize(relative, $toolbar-width, $toolbar-height, left, top, $offset,$toolbar-offset-top);
  border-radius: 1rem;
  border: 0.1rem solid;
  border-color: white;
  &>*{
      box-sizing:border-box;
      user-select:none;
  }
  
  display: flex;
  flex-direction: row;
  &[#{$ngTheme}="light"]{
      box-shadow:generateBoxShadow(false, $light-shadow, 1px, 2,2,5,0),
      generateBoxShadow(false, $light-shadow, 1px, -2,2,5,0),
      generateBoxShadow(false, $light-shadow, 1px, -2,-2,5,0),
      generateBoxShadow(false, $light-shadow, 1px, 2,-2,5,0),
      generateBoxShadow(inset, $light-shadow, 1px, 1,1,5,0),

      ;
      color: white;
      background: $color-dark-background-secondary;

      &>*[#{$ngClass}="top-main"]:not(:last-child){
          border-right:0.1rem solid white;
      }
  } 
    &>app-picture-holder{
      @include posSize(relative,20%,100%);
      &>div{
          border-radius:1rem;
          $height:80%;
          $offset:math.div(100% - 80%,2);
          @include posSize(relative,100%,$height,left,top,0,$offset);
          &>img{
              filter:invert(1) hue-rotate(150deg) saturate(10);
          }
      }
  }
}
p{
    margin:0 auto;
}
app-toolbar-box[#{$ngClass}="top-main"] {
  //@include posSize(relative,math.div(100%,$toolbar-boxes-number));
  @include posSize(reltaive,20%);
  display: inline-block;

  & > p {
    @include posSize(relative);
    display: inline-block;
    text-align: center;
    transform: translateY(50%);
    top: -15%;
    
  }
}
$grid-width:80%;
$grid-height:82%;
$grid-offest-ver:2rem;
app-grid-container[#{$ngClass}="main-grid"] {
  @include posSize(relative,$grid-width,$grid-height,left,top,math.div(100%-$grid-width,2),$grid-offest-ver);
  border-radius:2rem;
  padding:0.5rem 0.8rem 0.5rem 0.8rem;
  grid-template-columns:repeat(3,1fr);
  grid-template-rows:repeat(5,1fr);
  gap:2rem;

  &>*:nth-child(1){
      

  }

}


app-misc-text-field[#{$ngClass}="main-grid"] {
  border-radius: 0.8rem;
  padding: 0.3rem 0.5rem 0.3rem 0.5rem;
  box-sizing: border-box;
}
app-misc-text-field[#{$ngClass}="main-grid"] {
  border-radius: 0.8rem;
  padding: 0.3rem 0.5rem 0.3rem 0.5rem;
  box-sizing: border-box;
  position: relative;

  &[#{$ngTheme}="light"] > div.true-wrapper {
    @include backgroundGradient(linear, 30deg, $color-dark-scheme-light-dark,());
    color: #efefef;
  }

  & > div {
    border-radius: inherit;
  }

  & > div.true-wrapper > span {
    position: relative;
    display: block;
    font-size: 2rem;
  }

  & > div.true-wrapper > app-picture-holder {
  }

  &:nth-child(1), &:nth-child(2) {
    & > div.trick {
      @include posSize(absolute);
      display: inline;
      border-radius: inherit;
      filter: blur(20px);

      &::before {
        content: "";
        @include posSize(absolute);
        @include backgroundGradient(linear, to top right, ($neon-pink-3,$neon-blue-1));
      }
    }

    & > div.true-wrapper {
      @include generateSymetricalInset(2, (fade-out($neon-pink-1,0.5),fade-out($neon-blue-1,0.5),),1px,4,4,10,0);
    }
  }

  &:nth-child(1) {
    grid-column: span 2;
    grid-row: 1 / 3;

    & > div.true-wrapper {
      //border:0.2rem solid white;
    }

    & > div.true-wrapper > span {
      top: 2rem;
      text-align: center;
      font-size: 2.4rem;
    }

    & > div.true-wrapper > app-picture-holder {
      $picture-width: 50%;
      display: block;
      @include posSize(relative,$picture-width,6rem,left,top,math.div(100% - $picture-width,2),0);

      & > div {
        @include posSize(inherit,100%,100%);
      }

      & > div > img {
        @include posSize(absolute);
        transform: scale(1.2);
      }
    }
  }

  &:nth-child(2) {
    grid-row: span 5;


    & > div.true-wrapper {
      display: table;
      padding: 3rem 0.5rem 2.5rem 0.5rem;
    }

    & > div.true-wrapper > * {
      display: table-row;
    }

    & > div.true-wrapper > span {
      font-size: 1.3rem;

      &::before {
        content: url(#{$checkmark});
        position: relative;
        display: inline;
        top: 0.3rem;
        margin-right: 0.2rem;
        margin-left: 1.2rem;
        filter: invert(1);
      }
    }

    & > div.true-wrapper > div {
      box-sizing: border-box;
      position: relative;
      height: 5rem;

      & > div {
        box-sizing: border-box;
        $button-width: 80%;
        @include posSize(relative,$button-width,5rem,left,top,math.div(100% - $button-width,2),0);
        //border: 0.3rem solid red;
        border-radius: 2rem;
        display: table;
        overflow: hidden;
        @include backgroundGradient(linear, to top left, (#4d4d4d, $color-dark-background-secondary));
        $shadow-diameter: 20rem;
        border: 0.2rem solid white;
        transition: color 500ms ease-out 500ms;
        $delay-forward-1: 0.05s;
        $delay-forward-2: 0.5s;
        $delay-backwards-1: 0.25s;
        $delay-backwards-2: 0.75s;

        &::before, &::after {
          content: "";
          @include posSize(absolute,$shadow-diameter,$shadow-diameter,left,top,50%,50%);
          transform: translate(-50%,-50%);
          border-radius: 50%;
          transform-origin: center;
        }

        &::before {
          transition: box-shadow 500ms ease-out;
          transition-delay: $delay-backwards-2;
        }

        &::after {
          transition: box-shadow 500ms ease-out;
          transition-delay: $delay-backwards-1;
        }

        &.bbefore {
          content: "";
          box-sizing: border-box;
          @include posSize(absolute);
          border-radius: inherit;
          border: 0.2rem solid white;
          @include generateTransformSingular(scale-after-1,false,scale,0,1);
          transition: transform 500ms ease-in-out;
        }

        &:hover {
          color: #ff00f2;
          transition: color 500ms ease-in 500ms;

          &::after {
            box-shadow: inset 0 0 0 $shadow-diameter #dbdbdb;
            transition-delay: $delay-forward-2;
          }

          &::before {
            box-shadow: inset 0 0 0 $shadow-diameter #8a8a8a;
            transition-delay: $delay-forward-1;
          }
        }

        & > span {
          @include posSize();
          font-size: 2.2rem;
          text-align: center;
          display: table-cell;
          vertical-align: middle;
          border-radius: inherit;
          box-sizing: border-box;
          padding: 0.2rem 0.5rem 0.2rem 0.5rem;
          overflow: hidden;
          z-index: 1;
          user-select: none;
        }
      }
    }
  }

  &:nth-child(3) {
    grid-column: span 2;
    grid-row: span 3;

    $trick-diameter: 500px;
    perspective: 1000px;

    & > div.trick {
      @include posSize(absolute, $trick-diameter, $trick-diameter, left,top,50%,50%);
      display: block;
      transform: skew(30deg) translate(-22%,-48%) rotate3d(100,40,-40,60deg) rotate(0deg);
      transform-style: preserve-3d;
      border-radius: 50%;
      $dot-size: 5px;
      $shadow1: generateBoxShadowCircleAtTopLeftSquare(100, white, 500, 250,40,1px,2,0);
      $shadow2: generateBoxShadowCircleAtTopLeftSquare(100, white, 500, 200,40,1px,2,0);

      @keyframes rotateIn3d {
        to {
          transform: skew(30deg) translate(-22%,-48%) rotate3d(100,40,-40,60deg) rotate(1turn)
        }
      }

      animation: rotateIn3d 60s linear 0s infinite normal;

      &::before {
        content: "";
        position: absolute;
        width: $dot-size;
        height: $dot-size;
        border-radius: 50%;
        background: none;
        box-shadow: $shadow1;

        @keyframes shadow-swap {
          from {
            box-shadow: $shadow1
          }

          to {
            box-shadow: $shadow2
          }
        }

        animation: shadow-swap 5s ease-in-out 0s infinite alternate;
      }
    }

    & > div.true-wrapper {
      background: none;

      & > app-picture-holder {
        @include posSize(relative);
        display: block;

        & > div {
          @include posSize(relative);
          //generateBoxShadow($inset: false, $color: white,$unit: 1px,$rest...)
          //@function generateSymetricalInset($repeats,$color,$unit, $numbers...) {
          &::before {
            $light-size: 5rem;
            content: "";
            @include posSize(absolute, $light-size,$light-size,left,top,50%,50%);
            transform: translate(-42%,-10%);
            border-radius: 50%;
            background:white;
            box-shadow: generateBoxShadow(false,white,1px,0,0,60,30),generateBoxShadow(false,$neon-pink-1,1px,0,0,100,70),generateBoxShadow(false,$neon-blue-1,1px,0,0,140,110);
          }
        }
      }
    }
  }
}

  .sky {
    $children: 1,2,3;
    $size: 5px,3px,2px;
    $sky-width: 2000px;
    $sky-height: 1100px;

    & > div::before {
      left: -$sky-width
    }

    @each $x in $children {
      & > div:nth-child(#{$x}) {
        width: nth($size,$x);
        height: nth($size,$x)
      }
    }

    & > div {
      @include generateStars(3,white,-1*$sky-width,$sky-width,$sky-width,$sky-height,500s,2px,0,px,50,100,150);
    }
  }
